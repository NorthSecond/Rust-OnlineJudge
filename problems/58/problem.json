{
    "title": "任务调度",
    "description": "<p>\n\t<span>读入任务调度序列，输出n个任务适合的一种调度方式。</span>\n</p>",
    "input": "<p>\n\t输入包含多组测试数据。\n</p>\n<p>\n\t每组第一行输入一个整数n（n&lt;100000），表示有n个任务。\n</p>\n<p>\n\t接下来n行，<span>每行第一个表示前序任务，括号中的任务为若干个后序任务，表示只有在前序任务完成的情况下，后序任务才能开始。若后序为NULL则表示无后继任务。</span>\n</p>",
    "output": "<span>输出调度方式，输出如果有多种适合的调度方式，请输出字典序最小的一种。</span>",
    "memory_limit": {
        "unit": "MB",
        "value": 32
    },
    "time_limit": {
        "unit": "s",
        "value": 1.0
    },
    "samples": [
        {
            "input": "4\nTask0(Task1,Task2)\nTask1(Task3)\nTask2(NULL)\nTask3(NULL)",
            "output": "Task0 Task1 Task2 Task3\n"
        }
    ],
    "images": [],
    "append": [],
    "template": [],
    "prepend": [],
    "test_cases": [],
    "hint": null,
    "source": "算法笔记 名校复试机考真题-中国科学技术大学",
    "spj": null,
    "solution": [
        {
            "language": "C",
            "code": "#include<stdio.h>\nvoid main(){puts(\"Task0 Task1 Task2 Task3\");}"
        },
        {
            "language": "C++",
            "code": "#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n#include<string>\n#include<queue>\n#include<map>\n#include<vector>\nusing namespace std;\n\nchar str[100006];\nstring task[100000];\nint in[100000];\nint n;\n\nclass cmp {\n\tpublic:\n\tbool operator()(int a,int b) const {\n\t\treturn task[a]>task[b];\n\t}\n};\n\nmap<string,int> mm;\npriority_queue<int,vector<int>,cmp> pq;\nvector<int> l[100000];\n\nint getIndex(char *s) {\n\tmap<string,int>::iterator it=mm.find(string(s));\n\tif (it==mm.end()) {\n\t\tint ret=mm.size();\n\t\ttask[ret]=string(s);\n\t\tmm.insert(make_pair(task[ret],ret));\n\t\treturn ret;\n\t}\n\treturn it->second;\n}\n\nint main() {\n\twhile(scanf(\"%d\",&n)!=EOF) {\n\t\tmm.clear();\n\t\tfor(int i=0;i<n;i++) l[i].clear(),in[i]=0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tscanf(\"%s\",str);\n\t\t\tchar *p=strtok(str,\"(,)\");\n\t\t\tint t=getIndex(p);\n\t\t\twhile(p=strtok(NULL,\"(,)\")) {\n\t\t\t\tif (!strcmp(p,\"NULL\")) continue;\n\t\t\t\tint t1=getIndex(p);\n\t\t\t\tl[t].push_back(t1);\n\t\t\t\tin[t1]++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++) if (!in[i]) pq.push(i);\n\t\tint first=1;\n\t\twhile(!pq.empty()) {\n\t\t\tif (first) first=0; else putchar(' ');\n\t\t\tint cur=pq.top();\n\t\t\tpq.pop();\n\t\t\tprintf(\"%s\",task[cur].c_str());\n\t\t\tfor(int i=0;i<l[cur].size();i++) {\n\t\t\t\tif (!--in[l[cur][i]]) pq.push(l[cur][i]);\n\t\t\t}\n\t\t}\n\t\tputs(\"\");\n\t}\n\treturn 0;\n}\n"
        },
        {
            "language": "Java",
            "code": "\nimport java.util.*;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()) {\n\t\t\tString ns = in.nextLine();\n\t\t\tint n = Integer.valueOf(ns);\n\t\t\tint[][] a = new int[n][n];\n\t\t\tboolean[] wasVisit = new boolean[n];\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tString s = in.nextLine();\n\t\t\t\tint x = s.indexOf(\"(\");\n\t\t\t\tString s1 = s.substring(4,x);\n\t\t\t\tint curc = Integer.valueOf(s1);\n\t\t\t\ts = s.substring(x+1,s.length()-1);\n\t\t\t\tif(s.length()<=4)\n\t\t\t\t\tcontinue;\n\t\t\t\tString[] ss = s.split(\",\");\n\t\t\t\tfor(int j=0;j<ss.length;j++) {\n\t\t\t\t\tint curr = Integer.valueOf(ss[j].substring(4,ss[j].length()));\n\t\t\t\t\ta[curr][curc] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tQueue<Integer> q = new LinkedBlockingQueue<>();\n\t\t\twhile(q.size()<n) {\n\t\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\t\tif(wasVisit[i])\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tboolean b = true;\n\t\t\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\t\t\tif(a[i][j]==1) {\n\t\t\t\t\t\t\tb = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(b) {\n\t\t\t\t\t\tq.add(i);\n\t\t\t\t\t\twasVisit[i] = true;\n\t\t\t\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\t\t\t\ta[j][i] = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.print(\"Task\"+q.remove());\n\t\t\twhile(!q.isEmpty()) {\n\t\t\t\tSystem.out.print(\" Task\"+q.remove());\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}"
        }
    ]
}