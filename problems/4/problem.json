{
    "title": "麦森数",
    "description": "<p class=\"a\">\n\t形如<span>2<i><sup>P</sup></i>-1</span>的素数称为麦森数，这时<span>P</span>一定也是个素数。但反过来不一定，即如果<span>P</span>是个素数，<span>2<i><sup>P</sup></i>-1</span>不一定也是素数。到<span>1998</span>年底，人们已找到了<span>37</span>个麦森数。最大的一个是<span>P=3021377</span>，它有<span>909526</span>位。麦森数有许多重要应用，它与完全数密切相关。\n</p>\n<p class=\"a\">\n\t<span style=\"line-height:1.5;\">任务：从文件中输入</span><span style=\"line-height:1.5;\">P</span><span style=\"line-height:1.5;\">（</span><span style=\"line-height:1.5;\">1000&lt;P&lt;3100000</span><span style=\"line-height:1.5;\">），计算</span><span style=\"line-height:1.5;\">2<i><sup>P</sup></i>-1</span><span style=\"line-height:1.5;\">的位数和最后</span><span style=\"line-height:1.5;\">500</span><span style=\"line-height:1.5;\">位数字（用十进制高精度数表示）。</span>\n</p>\n<p class=\"a\">\n\t<span style=\"line-height:1.5;\"><br />\n</span>\n</p>",
    "input": "<p>\n\t每组输入只包含一个整数<span>P</span>（<span>1000&lt;P&lt;3100000</span>）。\n</p>\n<p>\n\t<br />\n</p>",
    "output": "<p class=\"a\">\n\t第一行：十进制高精度数<span>2<i><sup>P</sup></i>-1</span>的位数。\n</p>\n<p class=\"a\">\n\t<span style=\"line-height:1.5;\">第</span><span style=\"line-height:1.5;\">2-11</span><span style=\"line-height:1.5;\">行：十进制高精度数</span><span style=\"line-height:1.5;\">2<i><sup>P</sup></i>-1</span><span style=\"line-height:1.5;\">的最后</span><span style=\"line-height:1.5;\">500</span><span style=\"line-height:1.5;\">位数字。（每行输出</span><span style=\"line-height:1.5;\">50</span><span style=\"line-height:1.5;\">位，共输出</span><span style=\"line-height:1.5;\">10</span><span style=\"line-height:1.5;\">行，不足</span><span style=\"line-height:1.5;\">500</span><span style=\"line-height:1.5;\">位时高位补</span><span style=\"line-height:1.5;\">0</span><span style=\"line-height:1.5;\">）</span>\n</p>\n<p class=\"a\">\n\t<span style=\"line-height:1.5;\">不必验证</span><span style=\"line-height:1.5;\">2<i><sup>P</sup></i>-1</span><span style=\"line-height:1.5;\">与</span><span style=\"line-height:1.5;\">P</span><span style=\"line-height:1.5;\">是否为素数。</span>\n</p>\n<p class=\"a\">\n\t<span style=\"line-height:1.5;\"><br />\n</span>\n</p>",
    "memory_limit": {
        "unit": "MB",
        "value": 125
    },
    "time_limit": {
        "unit": "s",
        "value": 1.0
    },
    "samples": [
        {
            "input": "1279",
            "output": "386\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000104079321946643990819252403273640855\n38615262247266704805319112350403608059673360298012\n23944173232418484242161395428100779138356624832346\n49081399066056773207629241295093892203457731833496\n61583550472959420547689811211693677147548478866962\n50138443826029173234888531116082853841658502825560\n46662248318909188018470682222031405210266984354887\n32958028878050869736186900714720710555703168729087"
        }
    ],
    "images": [],
    "append": [],
    "template": [],
    "prepend": [],
    "test_cases": [
        {
            "input": " \n607",
            "output": "183\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000000531137992816767098689588206552468\n62732959311772703192319944413820040355986085224273\n91625022652292856688893294862465010153465793376527\n07239409519978766587351943831270835393219031728127"
        },
        {
            "input": " \n11213",
            "output": "3376\n37229319592369288171375276702260450911735069504025\n01666775521493207364365419948847701036390937200575\n78999895807757751266211130579057174494172220160705\n30243916116705990451304256206318289297738303095152\n43054977223951496482160183862886144630193601771054\n67775031092630309947473976185762073734477254414271\n35362428360863669327157635983045447971816718801639\n86954752514630565557184371791687566914032072497856\n85867185275866024396023352835139449800643270302781\n04224144971883680541689784796267391476087696392191"
        },
        {
            "input": " \n3217",
            "output": "969\n50116412703509705427773477972349821676443446668383\n11932254009964899405179024162405651905448369080961\n60616257430423617218633394158524264312087372665919\n62061753535748892894599629195183082621860853400937\n93283942026186658614250325145077309627423537682293\n86494071277008460771242118230808041392980870575047\n13825264571448379371125032081826126566649084251699\n45395188778961365024840573937859459944433523118828\n01236604062624686092121503499375847822922371443396\n28858485938215738821232393687046160677362909315071"
        },
        {
            "input": " \n3021377",
            "output": "909526\n11913281261611537667213798436049305566736876178255\n88332272350690015415089402574152885277835931459133\n40309734813994510763562374502553333760767267082261\n94805056498068234364270236322187114005959098576373\n86600852826717764565800819358859665607143791528714\n49648414600032153277107696032667644008966901945306\n68310460272117099806449192863428911515984207543022\n30411839060484427823257208111447478189918377204959\n69880392336860732039112145134495381589829360634296\n37539718233655887458210261770225422631973024694271"
        },
        {
            "input": " \n756839",
            "output": "227832\n18288448825429774219846956862417770870640302475247\n92828312585598040121588421297674731878093115313182\n16753914541797571068392534875840214937021204750378\n89055619401647443568291937923950889819022384242323\n28767636683196318572845992994357198238764218257600\n09234774987448978769799124034384499030364505405943\n84275497234460834579807796823701486980464630401353\n54915833132974601389482848422119619724789014565809\n44396409267168409183491136926492417685905113427201\n26927068487680404055813342880902603793328544677887"
        },
        {
            "input": " \n4423",
            "output": "1332\n78488728982288156282600813831296143663845945431144\n04375382154287127774560644785856415921332844358020\n64227146949130917627164470416896780700967735904298\n08909616750452927258000843500344831628297089902728\n64998199438764723457427626372969484830475091717418\n61811306885187927486226122933413689280566343844666\n46326572476167275660839105650528975713899320211121\n49579531142794625455330538706782106760176875097786\n61004600146021384084480212250536890547937420030957\n22096732954750721718115531871310231057902608580607"
        },
        {
            "input": " \n2976211\n",
            "output": "895929\n09706254902780580488538638337749488166014345988326\n02775279611779313026429691390417911643979834461015\n82796840762652659657879019767719300642845223087116\n62403659439552250198135538452083443036688067014742\n34849992771496671872080263423105090982169268837394\n90349237844608937582631965760646844828980604713404\n94758793031585694216573044384886437022298236407514\n12669234650178896555557671246448254579285995086138\n17684057898736849005201669426891137948698576073174\n93902398262481988755867710259809742681891351298047"
        },
        {
            "input": " \n1279",
            "output": "386\n00000000000000000000000000000000000000000000000000\n00000000000000000000000000000000000000000000000000\n00000000000000104079321946643990819252403273640855\n38615262247266704805319112350403608059673360298012\n23944173232418484242161395428100779138356624832346\n49081399066056773207629241295093892203457731833496\n61583550472959420547689811211693677147548478866962\n50138443826029173234888531116082853841658502825560\n46662248318909188018470682222031405210266984354887\n32958028878050869736186900714720710555703168729087"
        },
        {
            "input": " \n1398269",
            "output": "420921\n92869344833113191277605527242976118990404140986313\n46330749925695301108480232906107137430361697673618\n71144770733906268348075510403943006530506145641931\n82006175949117804409602179968745683820822290035183\n96656802758480090633946212021626368853976964240906\n84926123783162226894580700026998715604381463221056\n69416714078407660964902145192226084466445066843466\n08284609080353564816395117984170112944662406744358\n62878919205295726467356339554077345627396842746095\n03632628077779067477683462531985532025868451315711"
        },
        {
            "input": "86243",
            "output": "25962\n79703690602567473816512335624372076379566082030679\n12439206620235758650147895166177535866385795630368\n34055378477781370640297039260367479584587420897320\n52549318161396475554914563870886654597859221632902\n34690334971548318468117832228572631424866778315564\n60602846450000517145589171992401648810902661369025\n73707212409831769690354034882497230519475241696380\n43767876677292778517229159025657351862519228939958\n84693761059056977054150896001780329459143532013769\n15456322320250960867906195719699857021709433438207"
        }
    ],
    "hint": null,
    "source": "NOIP全国联赛普及组-2003年NOIP全国联赛普及组 一本通 一本通2018-第七章-分治算法",
    "spj": null,
    "solution": [
        {
            "language": "C++",
            "code": "#include<stdio.h>\n#include<math.h>\n#include<string.h>\nint a[501],t[501],n[501];\nvoid suanfa(int p)\n{\n\tint i,j,q;\n\tmemset(a,0,sizeof(a));\n\tmemset(t,0,sizeof(t));\n\tmemset(n,0,sizeof(n));\n\tt[500]=1,a[500]=2;\n\tif(p!=1)\n\t{\n\t\twhile(p)\n\t\t{\n\t\t\tif(p&1)\n\t\t\t{\n\t\t\t\tmemset(n,0,sizeof(n));\n\t\t\t\tfor(i=500;i>=1;i--)\n\t\t\t\t{\n\t\t\t\t\tfor(j=500,q=i;j>=1;j--,q--)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(q==0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tn[q]=n[q]+t[i]*a[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(i=500;i>=1;i--)\n\t\t\t\t{\n\t\t\t\t\tif(n[i]>=10)\n\t\t\t\t\t{\n\t\t\t\t\t\tn[i-1]=n[i]/10+n[i-1];\n\t\t\t\t\t\tn[i]=n[i]%10;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(i=500;i>=1;i--)\n\t\t\t\t\tt[i]=n[i];\n\t\t\t}\n\t\t\tmemset(n,0,sizeof(n));\n\t\t\tfor(i=500;i>=1;i--)\n\t\t\t{\n\t\t\t\tfor(j=500,q=i;j>=1;j--,q--)\n\t\t\t\t{\n\t\t\t\t\tif(q==0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\tn[q]=n[q]+a[i]*a[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(i=500;i>=1;i--)\n\t\t\t{\n\t\t\t\tif(n[i]>=10)\n\t\t\t\t{\n\t\t\t\t\tn[i-1]=n[i]/10+n[i-1];\n\t\t\t\t\tn[i]=n[i]%10;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(i=500;i>=1;i--)\n\t\t\t\ta[i]=n[i];\n\t\t\tp>>=1;\n\t\t}\n\t}\n\tt[500]--;\n\tfor(i=1;i<=500;i++)\n\t{\n\t\tprintf(\"%d\",t[i]);\n\t\tif(i%50==0)\n\t\t\tputs(\"\");\n\t}\n}\nint main()\n{\n\tint p;\n\tscanf(\"%d\",&p);\n\tprintf(\"%d\\n\",int(p*log10(2)+1));\n\tsuanfa(p);\n\treturn 0;\n}"
        },
        {
            "language": "Pascal",
            "code": "var n,i:longint;s:array[1..1000]of longint;o:array[1..500]of longint;\nprocedure sl(n:longint);\nvar i,j:longint;\nbegin\n  if n=0 then exit;\n  sl(n div 2);\n  for i:=1 to 500 do \n    for j:=1 to 500 do\n\t  if n mod 2=0 then s[i+j-1]:=s[i+j-1]+o[i]*o[j]\n\t  else s[i+j-1]:=s[i+j-1]+o[i]*o[j]*2;\n  for i:=1 to 500 do\n    begin\n      o[i]:=s[i] mod 10;\n\t  s[i+1]:=s[i+1]+s[i] div 10;\n\tend;\n  fillchar(s,sizeof(s),0);\nend;\nbegin\n  read(n);\n  writeln(trunc(ln(2)/ln(10)*n)+1);\n  o[1]:=1;\n  sl(n);\n  for i:=500 downto 2 do \n    begin  \n\t  write(o[i]);\n\t  if i mod 50=1 then writeln;\n\tend;\n  writeln(o[1]-1);\nend."
        }
    ]
}